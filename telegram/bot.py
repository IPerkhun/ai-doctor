import asyncio
import os
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode
from aiogram.types import (
    Message,
    KeyboardButton,
    ReplyKeyboardMarkup,
)
from aiogram.filters import CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties

import httpx

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
API_BACKEND_URL = os.getenv("API_BACKEND_URL", "http://localhost:8000")
MESSAGE_URL = f"{API_BACKEND_URL}/message"
RESET_URL = f"{API_BACKEND_URL}/reset"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="ü©∫ –ù–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä")],
        [KeyboardButton(text="üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å")],
    ],
    resize_keyboard=True,
)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id
    try:
        async with httpx.AsyncClient() as client:
            await client.post(RESET_URL, json={"user_id": user_id, "message": ""})
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: {e}")

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø AI-–¥–æ–∫—Ç–æ—Ä. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=main_kb
    )


@router.message(F.text == "ü©∫ –ù–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä")
async def start_dialog(message: Message):
    await message.answer("–û–ø–∏—à–∏ —Å–≤–æ–∏ –∂–∞–ª–æ–±—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", reply_markup=main_kb)


@router.message(F.text == "üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å")
async def end_dialog(message: Message):
    user_id = message.from_user.id

    try:
        async with httpx.AsyncClient() as client:
            await client.post(RESET_URL, json={"user_id": user_id, "message": ""})

        await message.answer(
            "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–∂–º–∏ 'ü©∫ –ù–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π.",
            reply_markup=main_kb,
        )

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {str(e)}")


@router.message(F.text)
async def handle_text(message: Message):
    user_id = message.from_user.id
    text = message.text

    # await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                MESSAGE_URL, json={"user_id": user_id, "message": text}, timeout=30
            )

        if response.status_code == 200:
            reply_text = response.json().get("reply", "–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω.")
        else:
            reply_text = "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

    except Exception as e:
        reply_text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏: {str(e)}"

    await message.answer(reply_text, reply_markup=main_kb)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–∞–ø—É—Å–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def run_bot():
    asyncio.run(dp.start_polling(bot))


if __name__ == "__main__":
    run_bot()
